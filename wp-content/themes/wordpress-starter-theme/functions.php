<?php/** * _s functions and definitions. * * @link https://developer.wordpress.org/themes/basics/theme-functions/ * * @package test */if ( ! function_exists( 'setup' ) ) :/** * Sets up theme defaults and registers support for various WordPress features. * * Note that this function is hooked into the after_setup_theme hook, which * runs before the init hook. The init hook is too late for some features, such * as indicating support for post thumbnails. */function setup() { 		load_theme_textdomain( 'test', get_template_directory() . '/languages' );	// Add default posts and comments RSS feed links to head.	add_theme_support( 'automatic-feed-links' );	/*	 * Let WordPress manage the document title.	 * By adding theme support, we declare that this theme does not use a	 * hard-coded <title> tag in the document head, and expect WordPress to	 * provide it for us.	 */	add_theme_support( 'title-tag' );	/*	 * Enable support for Post Thumbnails on posts and pages.	 *	 * @link https://developer.wordpress.org/themes/functionality/featured-images-post-thumbnails/	 */	add_theme_support( 'post-thumbnails' );	// This theme uses wp_nav_menu() in one location.	register_nav_menus( array(		'primary' => esc_html__( 'Primary Menu', 'test' ),	) );	/*	 * Switch default core markup for search form, comment form, and comments	 * to output valid HTML5.	 */	add_theme_support( 'html5', array(		'search-form',		'comment-form',		'comment-list',		'gallery',		'caption',	) );	/*	 * Enable support for Post Formats.	 * See https://developer.wordpress.org/themes/functionality/post-formats/	 */	add_theme_support( 'post-formats', array(		'aside',		'image',		'video',		'quote',		'link',	) );	// Set up the WordPress core custom background feature.	add_theme_support( 'custom-background', apply_filters( 'custom_background_args', array(		'default-color' => 'ffffff',		'default-image' => '',	) ) );}endif; // add_action( 'after_setup_theme', 'setup' );/** * Set the content width in pixels, based on the theme's design and stylesheet. * * Priority 0 to make it available to lower priority callbacks. * * @global int $content_width */function content_width() {	$GLOBALS['content_width'] = apply_filters( 'content_width', 640 );}add_action( 'after_setup_theme', 'content_width', 0 );/** * Register widget area. * * @link https://developer.wordpress.org/themes/functionality/sidebars/#registering-a-sidebar */      function widgets_init() {	register_sidebar( array(		'name'          => esc_html__( 'Sidebar', 'test' ),		'id'            => 'sidebar-1',		'description'   => '',		'before_widget' => '<aside id="%1$s" class="widget %2$s">',		'after_widget'  => '</aside>',		'before_title'  => '<h2 class="widget-title">',		'after_title'   => '</h2>',	) );}add_action( 'widgets_init', 'widgets_init' );/** * Enqueue scripts and styles. */function scripts() {	wp_enqueue_style( 'style', get_stylesheet_uri() );	if ( is_singular() && comments_open() && get_option( 'thread_comments' ) ) {		wp_enqueue_script( 'comment-reply' );	}}add_action( 'wp_enqueue_scripts', 'scripts' );/* Post Nav*/function my_post_nav() {	global $post;	// Don't print empty markup if there's nowhere to navigate.	$previous = ( is_attachment() ) ? get_post( $post->post_parent ) : get_adjacent_post( false, '', true );	$next     = get_adjacent_post( false, '', false );	if ( ! $next && ! $previous )		return;	?>	<nav class="navigation post-navigation" role="navigation">		<h1 class="screen-reader-text"><?php _e( 'Post navigation', 'test' ); ?></h1>		<div class="nav-links">			<?php previous_post_link( '%link', _x( '<span class="meta-nav">&larr;</span> %title', 'Previous post link', 'test' ) ); ?>			<?php next_post_link( '%link', _x( '%title <span class="meta-nav">&rarr;</span>', 'Next post link', 'test' ) ); ?>		</div><!-- .nav-links -->	</nav><!-- .navigation -->	<?php}